package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"fmt"

	"github.com/sashamihalache/meetmeup/graph/model"
	"github.com/sashamihalache/meetmeup/models"
)

// User is the resolver for the user field.
func (r *meetupResolver) User(ctx context.Context, obj *models.Meetup) (*models.User, error) {
	for _, user := range users {
		if user.ID == obj.UserID {
			return user, nil
		}
	}
	return nil, nil
}

// CreateMeetup is the resolver for the createMeetup field.
func (r *mutationResolver) CreateMeetup(ctx context.Context, input model.NewMeetup) (*models.Meetup, error) {
	panic(fmt.Errorf("not implemented: CreateMeetup - createMeetup"))
}

// Meetups is the resolver for the meetups field.
func (r *queryResolver) Meetups(ctx context.Context) ([]*models.Meetup, error) {
	return meetups, nil
}

// Meetups is the resolver for the meetups field.
func (r *userResolver) Meetups(ctx context.Context, obj *models.User) ([]*models.Meetup, error) {
	var result []*models.Meetup

	for _, meetup := range meetups {
		if meetup.UserID == obj.ID {
			result = append(result, meetup)
		}
	}

	return result, nil
}

// Meetup returns MeetupResolver implementation.
func (r *Resolver) Meetup() MeetupResolver { return &meetupResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type meetupResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
var users = []*models.User{
	{ID: "1", Username: "Sasha", Email: "sasha@gmail.com"},
	{ID: "2", Username: "John", Email: "john@gmail.com"},
	{ID: "3", Username: "Doe", Email: "doe@gmail.com"},
}
var meetups = []*models.Meetup{
	{ID: "1", Name: "First Meetup", Description: "This is the first meetup", UserID: "1"},
	{ID: "2", Name: "Second Meetup", Description: "This is the second meetup", UserID: "2"},
	{ID: "3", Name: "Third Meetup", Description: "This is the third meetup", UserID: "2"},
}

func (r *meetupResolver) Description(ctx context.Context, obj *models.Meetup) (string, error) {
	panic(fmt.Errorf("not implemented: Description - description"))
}
